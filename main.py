import argparse
import csv
import termgraph
from prettytable import PrettyTable
from modules.transactions import get_transactions
from modules.portfolio import get_portfolio, get_portfolio_history
from modules.dividends import get_dividends
from modules.analytics import calculate_summary

def show_transactions():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ."""
    transactions = get_transactions()
    table = PrettyTable(["ID", "–î–∞—Ç–∞", "–¢–∏–ø", "–¢—ñ–∫–µ—Ä", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–¶—ñ–Ω–∞", "–°—É–º–∞", "–ö–æ–º—ñ—Å—ñ—è (%)", "–ö–æ–º—ñ—Å—ñ—è ($)"])
    for row in transactions:
        table.add_row(row)
    print(table)

def show_portfolio():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ."""
    portfolio = get_portfolio()
    table = PrettyTable(["–¢—ñ–∫–µ—Ä", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞"])
    for row in portfolio:
        table.add_row(row)
    print(table)

def show_dividends():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—ñ –¥–∏–≤—ñ–¥–µ–Ω–¥–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ."""
    dividends = get_dividends()
    table = PrettyTable(["ID", "–î–∞—Ç–∞", "–¢—ñ–∫–µ—Ä", "–°—É–º–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–î–∏–≤—ñ–¥–µ–Ω–¥–∏ –∑–∞ –∞–∫—Ü—ñ—é"])
    for row in dividends:
        table.add_row(row)
    print(table)

def export_to_csv(data, filename, headers):
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ —É CSV."""
    if not data:
        print(f"‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É ({filename}).")
        return

    with open(filename, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(headers)  # –ó–∞–ø–∏—Å—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerows(data)  # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ
    print(f"‚úÖ –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É {filename}")

import os

def show_summary():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π."""
    portfolio = get_portfolio()
    transactions = get_transactions()

    total_value = 0  # –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
    total_invested = 0  # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π

    print("\nüìä **–ê–ù–ê–õ–Ü–ó –ü–û–†–¢–§–ï–õ–Ø**")

    if portfolio:
        table = PrettyTable(["–¢—ñ–∫–µ—Ä", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞", "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å"])
        for ticker, quantity, avg_price in portfolio:
            total_value += quantity * avg_price
            total_invested += quantity * avg_price  # –¢–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏—Ä—ñ–≤–Ω—é—î–º–æ –¥–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ

            table.add_row([ticker, quantity, avg_price, round(quantity * avg_price, 2)])
        print(table)
    else:
        print("‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ—Ä–æ–∂–Ω—ñ–π!")

    print(f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: **{round(total_value, 2)}$**")
    print(f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —ñ–Ω–≤–µ—Å—Ç–æ–≤–∞–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤: **{round(total_invested, 2)}$**")

    # ASCII –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ä—Ç—Ñ–µ–ª—è
    if portfolio:
        print("\nüìà **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≥—Ä–∞—Ñ—ñ–∫)**")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è termgraph
        with open("portfolio_data.txt", "w") as f:
            f.write("# Portfolio Distribution\n")
            for row in portfolio:
                f.write(f"{row[0]} {row[1]}\n")  # –¢—ñ–∫–µ—Ä, –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π (–±–µ–∑ –∫–æ–º–∏)

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ termgraph —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫
        os.system("termgraph portfolio_data.txt")

        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        os.remove("portfolio_data.txt")

def show_portfolio_history():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω –ø–æ—Ä—Ç—Ñ–µ–ª—è —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ."""
    history = get_portfolio_history()
    
    if not history:
        print("üìâ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ—Ä–æ–∂–Ω—è.")
        return

    table = PrettyTable(["–î–∞—Ç–∞", "–¢—ñ–∫–µ—Ä", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞", "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å"])
    for row in history:
        table.add_row(row)
    print(table)

def main():
    parser = argparse.ArgumentParser(description="Investment CLI - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏")
    parser.add_argument("command", help="–ö–æ–º–∞–Ω–¥–∞: transactions, portfolio, dividends, export, summary, portfolio_history")
    parser.add_argument("--type", help="–¢–∏–ø –µ–∫—Å–ø–æ—Ä—Ç—É (transactions, portfolio, dividends)", required=False)

    args = parser.parse_args()

    if args.command not in ["transactions", "portfolio", "dividends", "export", "summary", "portfolio_history"]:
        print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ–¥–Ω—É –∑:")
        print("   - transactions")
        print("   - portfolio")
        print("   - dividends")
        print("   - export --type transactions|portfolio|dividends")
        print("   - summary")
        print("   - portfolio_history")
        exit(1)

    if args.command == "transactions":
        show_transactions()
    elif args.command == "portfolio":
        show_portfolio()
    elif args.command == "dividends":
        show_dividends()
    elif args.command == "export":
        if args.type == "transactions":
            export_to_csv(get_transactions(), "transactions.csv", 
                          ["ID", "–î–∞—Ç–∞", "–¢–∏–ø", "–¢—ñ–∫–µ—Ä", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–¶—ñ–Ω–∞", "–°—É–º–∞", "–ö–æ–º—ñ—Å—ñ—è (%)", "–ö–æ–º—ñ—Å—ñ—è ($)"])
        elif args.type == "portfolio":
            export_to_csv(get_portfolio(), "portfolio.csv", ["–¢—ñ–∫–µ—Ä", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞"])
        elif args.type == "dividends":
            export_to_csv(get_dividends(), "dividends.csv", ["ID", "–î–∞—Ç–∞", "–¢—ñ–∫–µ—Ä", "–°—É–º–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–î–∏–≤—ñ–¥–µ–Ω–¥–∏ –∑–∞ –∞–∫—Ü—ñ—é"])
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –µ–∫—Å–ø–æ—Ä—Ç—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: transactions, portfolio, dividends")
    elif args.command == "summary":
        calculate_summary()
    elif args.command == "portfolio_history":
        show_portfolio_history()

if __name__ == "__main__":
    main()